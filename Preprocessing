import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder, LabelEncoder

def DescriptionStat(df_f, description_f):
    list_type = [] #номинальный или вещественный признак
    list_pass = [] #количество пропусков у конкретного признака
    list_dpass = [] #доля пропусков
    list_avg = [] #среднее
    list_medians = [] #медиана
    list_std = [] #стандартное отклонение
    list_min = [] #min
    list_max = [] #max
    list_kurtosis = []
    list_quantile_75 = [] #квантиль 75%
    m = len(df_f) 
    for i in description_f["Переменные"]:
        list_type.append(df_f[i].dtype)
        ress = 0
        for y in df_f[i]:
            if y == 'NaN': 
                ress += 1
        list_pass.append(ress) 
        if ress >= 0.00001: 
            list_dpass.append(ress / m) 
        else:
            list_dpass.append(0)
    description_f["Тип переменной"] = list_type
    description_f["Количество пропусков"] = list_pass
    description_f["Доля пропусков"] = list_dpass
    for i in description_f.index:
        if description_f.loc[i, "Тип переменной"] != 'object': 
            list_avg.append(df_f[description_f.loc[i, "Переменные"]].mean())
            list_medians.append(df_f[description_f.loc[i, "Переменные"]].median())
            list_std.append(df_f[description_f.loc[i, "Переменные"]].std())
            list_min.append(df_f[description_f.loc[i, "Переменные"]].min())
            list_max.append(df_f[description_f.loc[i, "Переменные"]].max())
            list_kurtosis.append(df_f[description_f.loc[i, "Переменные"]].kurtosis())
            list_quantile_75.append(df_f[description_f.loc[i, "Переменные"]].quantile([.75]))
        else:
            list_avg.append("-")
            list_medians.append("-")
            list_std.append("-")
            list_max.append("-")
            list_min.append("-")
            list_kurtosis.append("-")
            list_quantile_75.append("-")
    description_f["Тип переменной"] = description_f["Тип переменной"].replace(to_replace = ["object", "float64", "int64"], value = ["Категориальный", "Вещественный", "Целочисленный"])
    description_f["Среднее значение"] = list_avg
    description_f["Медиана"] = list_medians
    description_f["Стандартное отклонение"] = list_std
    description_f["Максимум"] = list_max
    description_f["Минимум"] = list_min
    description_f["Куртозис"] = list_kurtosis
    description_f["Квантиль 75%"] = list_quantile_75
    return description_f


data = pd.read_csv(r'C:\Users\Julia\Desktop\18D98~1\SberData2.csv', sep = ";")
df_1 = pd.DataFrame(data)

str_1 = pd.Series(df_1.columns)

df = df_1.dropna(axis = 1, how = "all")

str_2 = pd.Series(df.columns) 
fin = str_1[~str_1.isin(str_2)] 

fin.to_csv('list_del1.csv', encoding = "utf-8", sep = ";", index = False)
df_1.to_csv('data_del1.csv', encoding = 'utf-8', sep = ';', index = False)

description = pd.DataFrame(df.columns, columns = ["Переменные"])
description = description.round(4)
description_res = DescriptionStat(df, description)
description_res.to_csv("description_res.csv", sep = ";", index = False)

str_1 = pd.Series(df.columns)

#выделить целевую пременную
y = df["license"].as_matrix() #отделяем x от y
del df["license"] 
df_y = pd.DataFrame(y, columns = ["y"])

#описательная статистика по каждому признаку
description_2 = pd.DataFrame(df.columns, columns = ["Переменные"])
description_2 = description_2.round(4)
description_res_2 = DescriptionStat(df, description_2)
description_res_2.to_csv("description_res_2.csv", sep = ";", index = False)

#перевод категориальных признаков в булево пространство
for i in description_res_2.index:
    if description_res_2.loc[i, "Доля пропусков"] > 0.3: 
        del df[description_res_2.loc[i, "Переменные"]]
    if description_res_2.loc[i, "Тип переменной"] == "Категориальный":
        lbe = LabelEncoder()
        new_lbe_feature = lbe.fit_transform(df[description_res_2.loc[i, "Переменные"]]).reshape(-1,1)
        ohe = OneHotEncoder(n_values='auto', sparse = False)
        new_ohe_feature = ohe.fit_transform(new_lbe_feature)
        data_new_ohe = pd.DataFrame(new_ohe_feature, columns = ['city =' + str(j) for j in range(new_ohe_feature.shape[1])], 
                            index=df.index)
        del df[description_res_2.loc[i, "Переменные"]]
        df_3_numcolumns=len(df.columns)
        df_3 = pd.concat([df, data_new_ohe], axis = 1)  #конкатенация - склеивание


#новая описательная статистика
description_3 = pd.DataFrame(df_3.columns, columns = ["Переменные"])
description_3 = description_3.round(4)
description_res_3 = DescriptionStat(df_3, description_3)
description_res_3.to_csv("description_res_3.csv", sep = ";", index = False)

x = df_3.as_matrix(columns = list(df_3.columns)[:df_3_numcolumns])
x_2 = df_3.as_matrix(columns = list(df_3.columns)[df_3_numcolumns:])

imp = preprocessing.Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)

x = imp.fit_transform(x)
x_3 = np.concatenate([x, x_2],axis=1)

df_4 = pd.DataFrame(x_3[:,:], columns = description_3["Переменные"])

#новая описательная статистика
description_4 = pd.DataFrame(df_4.columns, columns = ["Переменные"])
description_4 = description_4.round(4)
description_res_4 = DescriptionStat(df_4, description_4)
description_res_4.to_csv("description_res_4.csv", sep = ";", index = False)

#сохранить готовый датасет
df_4.to_csv("x_banki.csv", index = False, encoding = "utf-8", sep = ";")
df_y.to_csv("y_banki.csv", index = False, encoding = "utf-8", sep = ";") 
